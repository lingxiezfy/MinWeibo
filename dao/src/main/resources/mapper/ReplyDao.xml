<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fy.real.min.weibo.dao.dao.ReplyDao">
  <resultMap id="BaseResultMap" type="com.fy.real.min.weibo.model.entity.Reply">
    <id column="reply_id" jdbcType="INTEGER" property="replyId" />
    <result column="comment_id" jdbcType="INTEGER" property="commentId" />
    <result column="from_id" jdbcType="INTEGER" property="fromId" />
    <result column="to_id" jdbcType="INTEGER" property="toId" />
    <result column="reply_content" jdbcType="VARCHAR" property="replyContent" />
    <result column="origin_reply_id" jdbcType="INTEGER" property="originReplyId" />
    <result column="likes_count" jdbcType="INTEGER" property="likesCount" />
    <result column="useful" jdbcType="INTEGER" property="useful" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    reply_id, comment_id, from_id, to_id, reply_content, origin_reply_id, likes_count, 
    useful, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from reply
    where reply_id = #{replyId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from reply
    where reply_id = #{replyId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="reply_id" keyProperty="replyId" parameterType="com.fy.real.min.weibo.model.entity.Reply" useGeneratedKeys="true">
    insert into reply (comment_id, from_id, to_id, 
      reply_content, origin_reply_id, likes_count, 
      useful, create_time, update_time
      )
    values (#{commentId,jdbcType=INTEGER}, #{fromId,jdbcType=INTEGER}, #{toId,jdbcType=INTEGER}, 
      #{replyContent,jdbcType=VARCHAR}, #{originReplyId,jdbcType=INTEGER}, #{likesCount,jdbcType=INTEGER}, 
      #{useful,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" keyColumn="reply_id" keyProperty="replyId" parameterType="com.fy.real.min.weibo.model.entity.Reply" useGeneratedKeys="true">
    insert into reply
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="commentId != null">
        comment_id,
      </if>
      <if test="fromId != null">
        from_id,
      </if>
      <if test="toId != null">
        to_id,
      </if>
      <if test="replyContent != null">
        reply_content,
      </if>
      <if test="originReplyId != null">
        origin_reply_id,
      </if>
      <if test="likesCount != null">
        likes_count,
      </if>
      <if test="useful != null">
        useful,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="commentId != null">
        #{commentId,jdbcType=INTEGER},
      </if>
      <if test="fromId != null">
        #{fromId,jdbcType=INTEGER},
      </if>
      <if test="toId != null">
        #{toId,jdbcType=INTEGER},
      </if>
      <if test="replyContent != null">
        #{replyContent,jdbcType=VARCHAR},
      </if>
      <if test="originReplyId != null">
        #{originReplyId,jdbcType=INTEGER},
      </if>
      <if test="likesCount != null">
        #{likesCount,jdbcType=INTEGER},
      </if>
      <if test="useful != null">
        #{useful,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.fy.real.min.weibo.model.entity.Reply">
    update reply
    <set>
      <if test="commentId != null">
        comment_id = #{commentId,jdbcType=INTEGER},
      </if>
      <if test="fromId != null">
        from_id = #{fromId,jdbcType=INTEGER},
      </if>
      <if test="toId != null">
        to_id = #{toId,jdbcType=INTEGER},
      </if>
      <if test="replyContent != null">
        reply_content = #{replyContent,jdbcType=VARCHAR},
      </if>
      <if test="originReplyId != null">
        origin_reply_id = #{originReplyId,jdbcType=INTEGER},
      </if>
      <if test="likesCount != null">
        likes_count = #{likesCount,jdbcType=INTEGER},
      </if>
      <if test="useful != null">
        useful = #{useful,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where reply_id = #{replyId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fy.real.min.weibo.model.entity.Reply">
    update reply
    set comment_id = #{commentId,jdbcType=INTEGER},
      from_id = #{fromId,jdbcType=INTEGER},
      to_id = #{toId,jdbcType=INTEGER},
      reply_content = #{replyContent,jdbcType=VARCHAR},
      origin_reply_id = #{originReplyId,jdbcType=INTEGER},
      likes_count = #{likesCount,jdbcType=INTEGER},
      useful = #{useful,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where reply_id = #{replyId,jdbcType=INTEGER}
  </update>
</mapper>